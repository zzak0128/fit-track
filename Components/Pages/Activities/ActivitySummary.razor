@page "/activity/summary/{ActivityId:int}"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Activities
@using FitTrack.Services.Activities
@using Microsoft.AspNetCore.Identity

@inject IActivityService ActivityService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Workout Summary</PageTitle>
<PageHeaderTitle Title="Workout Summary" CustomBackUrl="/activity/history" ShowBackButton />

@if (_activity is not null && _activity.ExerciseList.Any())
{
    <MudPaper Elevation="2" Class="mb-6">
        <MudStack Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start" Row Class="mt-3 ml-3">
            <MudStack>
                <MudText Typo="Typo.h4">@_activity.WorkoutName</MudText>
                <MudText Typo="Typo.subtitle2">@_activity.RoutineName</MudText>
            </MudStack>
            <MudStack Justify="Justify.FlexEnd" Class="ma-3">
                <MudText Color="Color.Primary" Typo="Typo.h6">@_totalReps Reps</MudText>
                <MudText Color="Color.Primary" Typo="Typo.h6">@(_totalWeight.ToString("n")) lbs</MudText>
            </MudStack>
        </MudStack>
    </MudPaper>

    <MudGrid Spacing="6" Justify="Justify.SpaceAround">
        @foreach (var exercise in _activity.ExerciseList)
        {
            <MudItem>
                <MudPaper Elevation="1" Class="mb-6">
                    <MudStack Spacing="0" Row Breakpoint="Breakpoint.Xs">
                        <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudText Class="ml-3 mt-2" Typo="Typo.h5">@exercise.Exercise.Name</MudText>
                            @if (exercise.Exercise.ImagePaths.Any())
                            {
                                <MudImage Style="border-radius:8px" Class="ml-2 mb-2 mr-2" Elevation="3" Src="@exercise.Exercise.ImagePaths.FirstOrDefault()" Height="250" ObjectFit="ObjectFit.Cover" />
                            }
                            else
                            {
                                <MudImage Style="border-radius:8px" Class="ml-2 mb-2 mr-2" Elevation="3" Height="250" Src="no-image-icon.png" ObjectFit="ObjectFit.Cover" />
                            }
                        </MudStack>
                        <MudStack StretchItems="StretchItems.All">
                            <MudTable Items="exercise.ActivitySets" Style="width:100%" Breakpoint="Breakpoint.None">
                                <HeaderContent>
                                    <MudTh>Set #</MudTh>
                                    <MudTh>Weight</MudTh>
                                    <MudTh>Reps</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Set #">@(exercise.ActivitySets.IndexOf(context) + 1)</MudTd>
                                    <MudTd DataLabel="Weight">@context.Weight</MudTd>
                                    <MudTd DataLabel="Reps">@context.Repetitions</MudTd>
                                </RowTemplate>
                            </MudTable>
                            <MudStack Class="mx-3" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Row>
                                <MudText Typo="Typo.subtitle2">Weight: @CalculateWeightTotal(exercise.ActivitySets) lbs</MudText>
                                <MudText Typo="Typo.subtitle2">Reps: @exercise.ActivitySets.Sum(x => x.Repetitions)</MudText>
                            </MudStack>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter]
    public int ActivityId { get; set; }

    private ActiveActivityDto _activity = null!;
    private ApplicationUser? CurrentUser;

    private int _totalReps;
    private double _totalWeight;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            _activity = await ActivityService.GetActiveActivityByIdAsync(ActivityId, CurrentUser);
            GetRepWeightTotals();
        }
    }

    private void GetRepWeightTotals()
    {
        _activity.ExerciseList.ForEach(x =>
        {
            foreach (var set in x.ActivitySets)
            {
                _totalReps += set.Repetitions;
                _totalWeight += set.Weight * set.Repetitions;
            }
        });
    }

    private string CalculateWeightTotal(List<ActivitySetDto> sets)
    {
        double weight = 0.00;

        foreach (var set in sets)
        {
            weight += set.Repetitions * set.Weight;
        }

        return weight.ToString("n");
    }
}

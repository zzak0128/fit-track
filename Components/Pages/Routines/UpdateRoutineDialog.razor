@using FitTrack.Components.Pages.Workouts
@using FitTrack.Data
@using FitTrack.Data.DTOs.Routines
@using FitTrack.Data.DTOs.Workouts
@using FitTrack.Services.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IRoutineService RoutineService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        Update this Routine!
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField @bind-Value="UpdateRoutine.Name" Label="Name" Required="true" Variant="Variant.Outlined" RequiredError="A name is required for a Routine." />
            <MudTextField @bind-Value="UpdateRoutine.Description" AutoGrow Lines="5" MaxLines="10" Label="Description" Variant="Variant.Outlined" />
        </MudForm>

        <MudButton Variant="Variant.Filled" FullWidth Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateWorkoutAsync">Add Workout</MudButton>

        @if (!routineWorkouts.Any())
        {
            <MudText>No workouts found for this routine.</MudText>
            <MudSpacer />
        }
        else
        {
            <MudTable Items="@routineWorkouts" Dense Class="ma-1">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Workouts in this Routine</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">@context.Name</MudTd>
                    <MudTd Class="d-flex justify-end">
                 <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => UpdateWorkoutsAsync(context)"/>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => RemoveWorkout(context)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="() => MudDialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="UpdateRoutineAsync" Variant="Variant.Filled">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public required BaseRoutineDto UpdateRoutine { get; set; }
    private List<BaseWorkoutDto> routineWorkouts { get; set; } = [];

    private UpdateRoutineWorkoutsDto updateRoutineWorkout { get; set; } = new();
    private MudForm form;
    private bool success;
    private string[] errors = [];

    protected async override Task OnInitializedAsync()
    {
        routineWorkouts = await RoutineService.GetRoutineWorkoutsAsync(UpdateRoutine.Id);
    }

    private void RemoveWorkout(BaseWorkoutDto workout) => routineWorkouts.Remove(workout);


    private async Task UpdateRoutineAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            updateRoutineWorkout.BaseRoutine = UpdateRoutine;
            updateRoutineWorkout.Workouts = routineWorkouts;

            try
            {
                await RoutineService.UpdateRoutineAsync(updateRoutineWorkout);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch
            {
                MudDialog.Close(DialogResult.Ok(false));
            }
        }
    }

    private async Task UpdateWorkoutsAsync(BaseWorkoutDto workout)
    {
        var dialogParams = new DialogParameters<UpdateWorkoutDialog>
        {
            { x => x.UpdateWorkout, workout }
        }; 

        var updateDialog = await DialogService.ShowAsync<UpdateWorkoutDialog>("Update a Workout!", dialogParams);

        var result = await updateDialog.Result;
        if (!result.Canceled)
        {
            workout = await updateDialog.GetReturnValueAsync<BaseWorkoutDto>();
            updateDialog.Close();
        }
    }

    private async Task CreateWorkoutAsync()
    {
        var createDialog = await DialogService.ShowAsync<AddWorkoutDialog>("Create a Workout!");

        var result = await createDialog.Result;
        if (!result.Canceled)
        {
            string newWorkoutName = await createDialog.GetReturnValueAsync<string>();
            if (!string.IsNullOrEmpty(newWorkoutName))
            {
                createDialog.Close();
                routineWorkouts.Add(new BaseWorkoutDto
                    {
                        Name = newWorkoutName
                    });
            }
            else
            {
                Snackbar.Add("Failed to Save the new Workout", Severity.Error);
            }
        }
    }
}
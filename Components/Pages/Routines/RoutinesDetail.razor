@page "/routines/detail/{RoutineId:int}"
@using FitTrack.Components.Pages.Workouts
@using FitTrack.Data
@using FitTrack.Data.DTOs.ExerciseSets
@using FitTrack.Data.DTOs.Routines
@using FitTrack.Services.Routines
@using FitTrack.Data.DTOs.Workouts
@using Microsoft.AspNetCore.Identity
@inject IRoutineService RoutineService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudStack row Justify="Justify.SpaceBetween">
    <MudText Class="mb-3" Typo="Typo.h2">Routine Overview</MudText>
    <MudIconButton Size="Size.Large" Color="Color.Primary" Icon="@Icons.Material.Rounded.AddCircle" OnClick="CreateWorkoutAsync" />
</MudStack>

<MudText Class="mb-3" Typo="Typo.h3">@DetailRoutine.Routine.Name</MudText>
<MudTabs Elevation="1" Outlined ApplyEffectsToContainer Ripple PanelClass="pa-6">
    @foreach (var workout in DetailRoutine.Workouts)
    {
        <MudTabPanel Text="@workout.Name" OnClick="() => GetTabList(workout.Id)">
                <MudTable T="DetailExerciseSetDto" Hover Striped Items="CurrentSets">
                    <ToolBarContent>
                    <MudText Class="mb-3" Typo="Typo.h6">@workout.Name</MudText>
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Rounded.AddCircle" OnClick="CreateExerciseSetAsync" />
                </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Exercise</MudTh>
                        <MudTh>Weight</MudTh>
                        <MudTh>Reps</MudTh>
                        <MudTh>Sets</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                            <MudTd DataLabel="Exercise">@context.Exercise.Name</MudTd>
                            <MudTd DataLabel="Weight">@context.Weight</MudTd>
                            <MudTd DataLabel="Reps">@context.Repetitions</MudTd>
                            <MudTd DataLabel="Sets">@context.SetCount</MudTd>
                    </RowTemplate>
                </MudTable>
        </MudTabPanel>
    }
</MudTabs>

@code {
    [Parameter]
    public int RoutineId { get; set; }

    private DetailRoutineDto DetailRoutine;
    private ApplicationUser CurrentUser;
    private List<DetailExerciseSetDto> CurrentSets = [];

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            DetailRoutine = await RoutineService.GetDetailRoutineByIdAsync(RoutineId, CurrentUser);
        }
    }

    private void GetTabList(int workoutId)
    {
        CurrentSets = DetailRoutine.ExerciseSets
            .Where(es => es.WorkoutId == workoutId)
            .ToList();
    }

    private async Task CreateWorkoutAsync()
    {
        var createDialog = await DialogService.ShowAsync<AddWorkoutDialog>("Create a Workout!");

        var result = await createDialog.Result;
        if (!result.Canceled)
        {
            string newWorkoutName = await createDialog.GetReturnValueAsync<string>();
            if (!string.IsNullOrEmpty(newWorkoutName))
            {
                createDialog.Close();
                var workout = (new BaseWorkoutDto
                {
                    Name = newWorkoutName
                });

                await RoutineService.AddWorkoutToRoutineAsync(DetailRoutine.Routine.Id, workout);
                DetailRoutine = await RoutineService.GetDetailRoutineByIdAsync(RoutineId, CurrentUser);
            }
            else
            {
                Snackbar.Add("Failed to Save the new Workout", Severity.Error);
            }
        }
    }

    private async Task CreateExerciseSetAsync()
    {
        // UpdateWorkoutExerciseSetDto workoutExerciseUpdate = new()
        // {
        //     WorkoutId = UpdateWorkout.Id,
        //     WorkoutName = UpdateWorkout.Name,
        //     ExerciseSets = ExerciseSets
        // };

        // try
        // {
        //     await RoutineService.UpdateWorkoutAsync(workoutExerciseUpdate);
        // }
        // catch
        // {

        // }
        // MudDialog.Close(DialogResult.Ok(UpdateWorkout));
    }

}

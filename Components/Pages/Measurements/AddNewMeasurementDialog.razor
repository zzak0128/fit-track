@using FitTrack.Data
@using FitTrack.Data.DTOs.Measurements
@using FitTrack.Data.DTOs.Routines
@using FitTrack.Services.Measurements
@using FitTrack.Services.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IMeasurementService MeasurementService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@MudDialog.Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@form" @bind-IsValid="@success">
            <MudFocusTrap>
                <MudNumericField @bind-Value="AddMeasurement.Amount" Label="Amount" Required Variant="Variant.Outlined" />
                <MudTextField @bind-Value="AddMeasurement.Unit" Label="Unit" Disabled Variant="Variant.Outlined" />
                <MudDatePicker @bind-Date="AddMeasurement.Date" Label="Date" Required Variant="Variant.Outlined" RequiredError="Please select a date." />
            </MudFocusTrap>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="() => MudDialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddMeasurementAsync" Variant="Variant.Filled">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public required ApplicationUser User { get; set; }

    [Parameter]
    public required string MeasurementName { get; set; }

    private AddMeasurementDto AddMeasurement { get; set; } = new();
    private MudForm form = null!;
    private bool success;


    protected override async Task OnInitializedAsync()
    {
        AddMeasurement = await MeasurementService.GetMeasurementByNameAsync(MeasurementName, User);
        if (AddMeasurement is null)
        {
            MudDialog.Close(DialogResult.Ok(false));
        }
        else
        {
            AddMeasurement.User = User;
        }
    }

    private async Task AddMeasurementAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                await MeasurementService.AddMeasurementAsync(AddMeasurement);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch
            {
                MudDialog.Close(DialogResult.Ok(false));
            }
        }
    }
}

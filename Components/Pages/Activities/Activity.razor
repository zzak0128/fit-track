@page "/activity/start/{ActivityId:int}"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Activities
@using FitTrack.Data.DTOs.ExerciseSets
@using FitTrack.Services.Activities
@using Microsoft.AspNetCore.Identity

@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IActivityService ActivityService
@inject ISnackbar Snackbar

<PageTitle>Start @_activity?.WorkoutName</PageTitle>
<PageHeaderTitle title="@_activity?.WorkoutName" />

<MudTabs @ref="mudTabs" Elevation="1" Outlined ApplyEffectsToContainer Ripple PanelClass="pa-6">
    @if (_activity is not null)
    {
        @foreach (var exercise in _activity.ExerciseList)
        {
            <MudTabPanel Text="@exercise.Exercise.Name">
                <MudCarousel TData="string"
                             ShowArrows
                             ShowBullets
                             EnableSwipeGesture
                             AutoCycle
                             ItemsSource="exercise.Exercise.ImagePaths"
                             Style="height:450px">
                    <ItemTemplate>
                        <div class="d-flex justify-center" style="Height:100%">
                            <MudImage ObjectFit="ObjectFit.Contain" Src="@context"></MudImage>
                        </div>
                    </ItemTemplate>
                </MudCarousel>

                <MudCard Class="ma-3">
                    <MudCardContent>
                        @exercise.Exercise.Description
                    </MudCardContent>
                </MudCard>

                <MudDataGrid T="ActivitySetDto"
                             Items="exercise.ActivitySets"
                             ReadOnly="false"
                             Dense
                             EditMode="DataGridEditMode.Cell"
                             EditTrigger="DataGridEditTrigger.OnRowClick"
                             CommittedItemChanges="SaveWorkoutAsync"
                             Class="ma-3">
                    <Columns>
                        <PropertyColumn Title="Weight" Property="x => x.Weight" />
                        <PropertyColumn Title="Reps" Property="x => x.Repetitions" />
                        <TemplateColumn>
                            <EditTemplate>
                                <MudStack>
                                    <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="() => AddSet(exercise, context.Item)"></MudIconButton>
                                </MudStack>
                            </EditTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        }
        <MudStack Class="d-flex justify-end ma-3" Row>
            <MudButton FullWidth Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.KeyboardDoubleArrowLeft" Color="Color.Primary" Disabled="@(CurrentTabIndex == 0)" OnClick="PreviousTab">Previous</MudButton>
            <MudButton FullWidth Variant="Variant.Filled" Color="Color.Success" OnClick="SaveWorkoutAsync">Save</MudButton>
            <MudButton FullWidth Variant="Variant.Filled" EndIcon="@Icons.Material.Outlined.KeyboardDoubleArrowRight"  Color="Color.Primary" Disabled="@(CurrentTabIndex == TabCount - 1)" OnClick="NextTab">Next</MudButton>
        </MudStack>
    }
</MudTabs>

<MudStack Class="d-flex justify-end ma-3" Row>
    <MudButton FullWidth Variant="Variant.Filled" Color="Color.Success" OnClick="CompleteWorkoutAsync">Complete</MudButton>
</MudStack>

@code {
    [Parameter]
    public int ActivityId { get; set; }

    private MudTabs mudTabs;

    private ActiveActivityDto _activity;
    private ApplicationUser CurrentUser;

    private int tabCount;

    public int TabCount
    {
        get { return  mudTabs.Panels.Count; }
    }

    private int currentTabIndex;

    public int CurrentTabIndex
    {
        get { return mudTabs.ActivePanelIndex; }
    }


    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            _activity = await ActivityService.GetActiveActivityByIdAsync(ActivityId, CurrentUser);
        }
    }

    private void AddSet(WorkoutLogDto log, ActivitySetDto set)
    {
        var newSet = new ActivitySetDto
        {
            Weight = set.Weight,
            Repetitions = set.Repetitions
        };

        log.ActivitySets.Add(newSet);
    }

    private void NextTab()
    {
        if (CurrentTabIndex < TabCount - 1)
        {
            mudTabs.ActivatePanel(CurrentTabIndex + 1);
        }
    }

    private void PreviousTab()
    {
        if (CurrentTabIndex > 0)
        {
            mudTabs.ActivatePanel(CurrentTabIndex - 1);
        }
    }

    private async Task CompleteWorkoutAsync()
    {
        await ActivityService.SaveActivityAsync(_activity, true);
        Navigation.NavigateTo("/activity/history", true);
    }

    private async Task SaveWorkoutAsync()
    {
        try
        {
            await ActivityService.SaveActivityAsync(_activity);
            Snackbar.Add("Workout has been saved successfully!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Unable to save workout, try again later.", Severity.Error);
        }
    }
}

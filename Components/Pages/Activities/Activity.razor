@page "/activity/start/{ActivityId:int}"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Activities
@using FitTrack.Data.DTOs.ExerciseSets
@using FitTrack.Data.DTOs.Exercises
@using FitTrack.Services.Activities
@using Microsoft.AspNetCore.Identity

@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IActivityService ActivityService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Start @_activity?.WorkoutName</PageTitle>
<PageHeaderTitle ActionMenu="mudMenu">
    <CustomContent>
        @_activity?.RoutineName -- @_activity?.WorkoutName
    </CustomContent>
</PageHeaderTitle>

<MudMenu @ref="mudMenu" PositionAtCursor>
    <MudMenuItem OnClick="AddExerciseAsync">Add a Workout</MudMenuItem>
    <MudMenuItem OnClick="RemoveWorkout" Disabled="@(_selectedWorkout is null)">Remove this Workout</MudMenuItem>
</MudMenu>
<MudStack spacing="0" Justify="Justify.SpaceBetween">
    <MudTabs @ref="mudTabs" Elevation="1" ActiveTabClass="border-solid border-2 mud-border-primary" HideSlider Border Outlined ApplyEffectsToContainer Rounded PanelClass="pa-6">
        @if (_activity is not null)
        {
            <MudContainer Gutters="false" Style="overflow:scroll">
                @*                 <MudTabPanel @ref ="startPanel" Text="Time to get started!" Visible="@(_notStarted)" Disabled="@(!_notStarted)">
                    <MudStack Justify="Justify.Center" Class="ma-6" Style="height:400px;max-height:65vh">
                        <MudText Align="Align.Center" Color="Color.Primary" GutterBottom Typo="Typo.h5">Start your workout!</MudText>
                        <MudStack Justify="Justify.Center" Row>
                            <MudButton OnClick="StartWorkout" Variant="Variant.Filled" IconSize="Size.Large" Style="height:100px; width:100px; border-radius:50%" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Success" Size="Size.Large">Start</MudButton>
                        </MudStack>
                    </MudStack>
                </MudTabPanel> *@
                @foreach (var exercise in _activity.ExerciseList)
                {
                    <MudTabPanel Style="max-height:65vh" Disabled="@(exercise.IsCompleted)" Icon="@(exercise.IsCompleted? Icons.Material.Rounded.Check : null)" OnClick="() => SetSelectedWorkout(exercise)">
                        <ChildContent>
                            <MudCarousel TData="string"
                                         ShowArrows
                                         ShowBullets
                                         EnableSwipeGesture
                                         AutoCycle
                                         ItemsSource="exercise.Exercise.ImagePaths"
                                         Style="height:350px">
                                <ItemTemplate>
                                    <div class="d-flex justify-center" style="Height:100%">
                                        <MudImage ObjectFit="ObjectFit.Contain" Src="@context" FallbackSrc="no-image-icon.png"></MudImage>
                                    </div>
                                </ItemTemplate>
                            </MudCarousel>

                            <MudCard Class="ma-3">
                                <MudCardContent>
                                    @exercise.Exercise.Description
                                </MudCardContent>
                            </MudCard>

                            <MudText Typo="Typo.subtitle1" Color="Color.Secondary">Recommended Sets: @exercise.SetCount</MudText>
                            <MudDataGrid T="ActivitySetDto"
                                         Items="exercise.ActivitySets"
                                         ReadOnly="false"
                                         Dense
                                         EditMode="DataGridEditMode.Cell"
                                         EditTrigger="DataGridEditTrigger.OnRowClick"
                                         CommittedItemChanges="SaveWorkoutAsync"
                                         Class="ma-3">
                                <Columns>
                                    <PropertyColumn Title="Weight" Property="x => x.Weight" />
                                    <PropertyColumn Title="Reps" Property="x => x.Repetitions" />
                                    <TemplateColumn>
                                        <EditTemplate>
                                            <MudStack Row Justify="Justify.FlexEnd">
                                                <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="() => RemoveSet(exercise, context.Item)"></MudIconButton>
                                                <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" OnClick="() => AddSet(exercise, context.Item)"></MudIconButton>
                                            </MudStack>
                                        </EditTemplate>
                                    </TemplateColumn>
                                </Columns>
                            </MudDataGrid>
                            <MudButton FullWidth Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.CheckCircle" Color="Color.Success" Disabled="exercise.IsCompleted" OnClick="() => CompleteWorkoutAsync(exercise)">Complete this Exercise!</MudButton>
                        </ChildContent>
                        <TabContent>
                            <MudText Style="word-wrap:break-word; max-width:70%">@exercise.Exercise.Name</MudText>
                        </TabContent>
                    </MudTabPanel>
                }
            </MudContainer>
        }
    </MudTabs>

    <MudStack Class="d-flex justify-end ma-3" Row>
        <MudButton FullWidth Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Pause" Color="Color.Default" OnClick="PauseActivity">Pause</MudButton>
        <MudButton FullWidth Variant="Variant.Filled" EndIcon="@Icons.Material.Outlined.CheckCircle" Color="Color.Success" Disabled="@(_notStarted || !WorkoutCompleted)" OnClick="CompleteActivityAsync">Finish</MudButton>
    </MudStack>
</MudStack>


@code {
    [Parameter]
    public int ActivityId { get; set; }

    private MudTabs mudTabs = null!;
    private bool _shouldLoadLastTab = false;

    private bool _notStarted = true;

    public int CompletedExercises
    {
        get { return _activity.ExerciseList.Count(x => x.IsCompleted); }
    }

    public int TotalExercises
    {
        get { return _activity.ExerciseList.Count(); }
    }

    public bool WorkoutCompleted
    {
        get { return CompletedExercises == TotalExercises; }
    }

    private MudMenu mudMenu = null!;

    private ActiveActivityDto _activity = null!;
    private ApplicationUser? CurrentUser;
    private WorkoutLogDto? _selectedWorkout;

    public int TabCount
    {
        get { return mudTabs.Panels.Count; }
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            _activity = await ActivityService.GetActiveActivityByIdAsync(ActivityId, CurrentUser);
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _notStarted = true;
        }
        else
        {
            _notStarted = false;
        }

        if (!firstRender && _shouldLoadLastTab)
        {
            mudTabs.ActivatePanel(mudTabs.Panels.Last());
            _shouldLoadLastTab = false;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddExerciseAsync()
    {
        var addExerciseDialog = await DialogService.ShowAsync<AddExerciseDialog>("Add a Workout!");
        var result = await addExerciseDialog.Result;
        if (!result!.Canceled)
        {
            ExerciseDto? newExercise = await addExerciseDialog.GetReturnValueAsync<ExerciseDto>();
            if (newExercise is not null)
            {
                _activity.ExerciseList.Add(new WorkoutLogDto
                {
                    Exercise = newExercise,
                    ActivitySets = [new ActivitySetDto() { Weight = 0, Repetitions = 0 }]
                });

                _shouldLoadLastTab = true;
            }
            else
            {
                Snackbar.Add("Failed to add the new exercise", Severity.Error);
            }
        }
    }

    private async Task CompleteWorkoutAsync(WorkoutLogDto log)
    {
        log.IsCompleted = true;
        if (log.WorkoutLogId > 0)
        {
            await ActivityService.CompleteWorkoutAsync(log.WorkoutLogId);
        }

        await SaveWorkoutAsync();
    }

    private void StartWorkout()
    {
        _notStarted = false;
        var activePanels = mudTabs.Panels.Where(x => x.Disabled == false && x.Visible);
        if (activePanels.Any())
        {
            mudTabs.ActivatePanel(activePanels.First());
        }
    }

    private void AddSet(WorkoutLogDto log, ActivitySetDto set)
    {
        var newSet = new ActivitySetDto
        {
            Weight = set.Weight,
            Repetitions = set.Repetitions
        };

        log.ActivitySets.Add(newSet);
    }

    private void RemoveSet(WorkoutLogDto log, ActivitySetDto set)
    {
        int setCount = log.ActivitySets.Count;
        if (setCount > 1)
        {
            log.ActivitySets.Remove(set);
        }
        else if (setCount == 1)
        {
            _activity.ExerciseList.Remove(log);
        }
    }

    private void SetSelectedWorkout(WorkoutLogDto log)
    {
        _selectedWorkout = log;
    }

    private void RemoveWorkout()
    {
        _activity.ExerciseList.Remove(_selectedWorkout!);
    }

    private async Task CompleteActivityAsync()
    {
        await ActivityService.SaveActivityAsync(_activity, true);
        Navigation.NavigateTo(@$"/activity/summary/{_activity.ActivityId}", true);
    }

    private async Task SaveWorkoutAsync()
    {
        try
        {
            await ActivityService.SaveActivityAsync(_activity);
            Snackbar.Add("Workout has been saved successfully!", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Unable to save workout, try again later.", Severity.Error);
        }
    }

    private async Task PauseActivity()
    {
        try
        {
            await ActivityService.SaveActivityAsync(_activity);
            Navigation.NavigateTo("/activity/history", true);
        }
        catch
        {
            Snackbar.Add("Unable to save workout, you will lose all progress if you leave the page.", Severity.Error);
        }
    }
}

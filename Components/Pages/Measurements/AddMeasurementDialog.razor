@using FitTrack.Data
@using FitTrack.Data.DTOs.Measurements
@using FitTrack.Data.DTOs.Routines
@using FitTrack.Services.Measurements
@using FitTrack.Services.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IMeasurementService MeasurementService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>
        Create a new Routine!
    </TitleContent>
    <DialogContent>
        <MudForm @ref="@form" @bind-IsValid="@success">
                            <MudAutocomplete @bind-Value="AddMeasurement.Name"
                                 SearchFunc="Search"
                                 Variant="Variant.Outlined"
                                 Label="Enter a Measurement"
                                 Dense
                                 Placeholder="Search"
                                 Clearable
                                 CoerceValue/>

            <MudNumericField @bind-Value="AddMeasurement.Amount" Label="Amount" Required Variant="Variant.Outlined" />
            <MudTextField @bind-Value="AddMeasurement.Unit" Label="Unit" Required="true" Variant="Variant.Outlined" RequiredError="Enter the units for this measurement, e.g. lbs, kgs, etc" />
            <MudDatePicker @bind-Date="AddMeasurement.Date" Label="Date" Required="true" Variant="Variant.Outlined" RequiredError="Please select a date." />


        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="() => MudDialog.Cancel()" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddMeasurementAsync" Variant="Variant.Filled">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public ApplicationUser ApplicationUser { get; set; } = null!;

    private List<string> CurrentMeasurements = [];
    private AddMeasurementDto AddMeasurement { get; set; } = new();
    private MudForm form;
    private bool success;


    protected override async Task OnInitializedAsync()
    {
        AddMeasurement.User = ApplicationUser;
        CurrentMeasurements = await MeasurementService.GetMeasurementNamesAsync(ApplicationUser);
    }

    private async Task AddMeasurementAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                await MeasurementService.AddMeasurementAsync(AddMeasurement);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch
            {
                MudDialog.Close(DialogResult.Ok(false));
            }
        }
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        CurrentMeasurements = await MeasurementService.GetMeasurementNamesAsync(ApplicationUser);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return CurrentMeasurements;
        }

        return CurrentMeasurements.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}

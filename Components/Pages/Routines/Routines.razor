@page "/routines"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Routines
@using FitTrack.Services.Routines
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IRoutineService RoutineService
@inject IDialogService DialogService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

@attribute [Authorize]

@if (!RoutineList.Any())
{
    <MudText Typo="Typo.h2" Color="Color.Primary">No routines are available</MudText>
}
else
{
    <MudTable Items="@RoutineList" Hover Striped>
        <ToolBarContent>
            <MudText Typo="Typo.h5">Routines</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd Class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditRoutineAsync(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => DeleteRoutineAsync(context.Id)"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateRoutineAsync" Style="position:fixed; bottom:25px; right:25px;" />

@code {
    public List<BaseRoutineDto> RoutineList { get; set; } = [];
    public ApplicationUser? CurrentUser { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            RoutineList = await RoutineService.GetBaseRoutinesAsync(CurrentUser);
        }
    }

    private async Task CreateRoutineAsync()
    {
        var dialogParams = new DialogParameters<CreateRoutineDialog>
        {
            {x  => x.ApplicationUser, CurrentUser }
        };

        var createDialog = await DialogService.ShowAsync<CreateRoutineDialog>("Create a new Routine!", dialogParams);
        var result = await createDialog.Result;
        if (!result.Canceled)
        {
            bool success = await createDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                createDialog.Close();
                RoutineList = await RoutineService.GetBaseRoutinesAsync(CurrentUser!);
            }
            else
            {
                Snackbar.Add("Failed to Save the new Routine", Severity.Error);
            }
        }
    }

    private async Task EditRoutineAsync(BaseRoutineDto editRoutine)
    {
        var dialogParameters = new DialogParameters<UpdateRoutineDialog>
        {
                { x => x.UpdateRoutine, editRoutine }
        };

        var updateDialog = await DialogService.ShowAsync<UpdateRoutineDialog>("Update this Routine!", dialogParameters);
        var result = await updateDialog.Result;
        if (!result.Canceled)
        {
            bool success = await updateDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                updateDialog.Close();
                RoutineList = await RoutineService.GetBaseRoutinesAsync(CurrentUser);
            }
            else
            {
                Snackbar.Add("Failed to update the Routine", Severity.Error);
            }
        }
    }

    private async Task DeleteRoutineAsync(int routineId)
    {
        try
        {
            await RoutineService.DeleteRoutineAsync(routineId);
        }
        catch
        {
            Snackbar.Add("Failed to delete the routine", Severity.Error);
        }

        RoutineList = await RoutineService.GetBaseRoutinesAsync(CurrentUser);
    }
}

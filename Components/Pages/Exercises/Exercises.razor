@page "/exercises"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Exercises
@using FitTrack.Services.Routines
@inject IRoutineService RoutineService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mb-4" />
}

@if (!FullExerciseList.Any())
{
    <MudPaper Elevation="2" Class="pa-3">
        <MudText Typo="Typo.h2" Color="Color.Primary">No exercises are available.</MudText>
        <MudText Typo="Typo.h6">Click the button below to add your first Exercise!</MudText>
    </MudPaper>
}
else
{
    <PageHeaderTitle title="Exercises" />

    <MudToolBar Class="pt-6 mt-6" Gutters>
        <MudChipSet T="MuscleGroup"
                    @bind-SelectedValues="_selectedMuscleGroups"
                    SelectionMode="SelectionMode.MultiSelection">
            @foreach (var group in Enum.GetValues(typeof(MuscleGroup)).Cast<MuscleGroup>())
            {
                <MudChip T="MuscleGroup" Variant="Variant.Text" Color="Color.Primary" Value="@group" OnClick="FilterExercises" />
            }
        </MudChipSet>
    </MudToolBar>

    <MudGrid T="ExerciseDto" Items="ExerciseList" Spacing="2" Justify="Justify.FlexStart" Class="mt-3">
        @foreach (var exercise in FilteredExerciseList)
        {
            <MudItem xs="12" sm="6" md="4" lg="3" xl="2" Style="display:flex">
                <MudMenu ActivationEvent="MouseEvent.RightClick" PositionAtCursor>
                    <ActivatorContent>
                        <ExerciseGridItem Exercise="exercise" />
                    </ActivatorContent>
                    <ChildContent>
                        <AuthorizeView>
                            <Authorized>
                                <MudMenuItem Label="Edit" OnClick="() => EditExerciseAsync(exercise)" />
                                <MudMenuItem Label="Delete" OnClick="() => DeleteExerciseAsync(exercise)" />
                            </Authorized>
                            <NotAuthorized>
                                <MudMenuItem Label="Sign in to manage" Href="Account/Login" />
                            </NotAuthorized>
                        </AuthorizeView>
                    </ChildContent>
                </MudMenu>
            </MudItem>
        }
    </MudGrid>
}

<AuthorizeView>
    <Authorized>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateExerciseAsync" Style="position:fixed; bottom:25px; right:25px;" />
    </Authorized>
</AuthorizeView>

@code {

    private List<ExerciseDto> FullExerciseList { get; set; } = [];
    private List<ExerciseDto> FilteredExerciseList { get; set; } = [];
    private bool _isLoading = false;

    private IReadOnlyCollection<MuscleGroup> _selectedMuscleGroups = [];

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        FullExerciseList = await RoutineService.GetAllExercisesAsync();
        FilterExercises();
    }

    private void ClearFilters()
    {
        _selectedMuscleGroups = [];
        FilterExercises();
        _isLoading = false;
    }

    private async Task CreateExerciseAsync()
    {
        var dialogOptions = new DialogOptions
        {
            FullWidth = false
        };

        var createDialog = await DialogService.ShowAsync<CreateExerciseDialog>("Create an Exercise!", dialogOptions);
        var result = await createDialog.Result;
        if (!result.Canceled)
        {
            bool success = await createDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                createDialog.Close();
                FullExerciseList = await RoutineService.GetAllExercisesAsync();
                FilterExercises();
            }
            else
            {
                Snackbar.Add("Failed to save the Exercise", Severity.Error);
            }
        }
    }

    private void FilterExercises()
    {
        if (!_selectedMuscleGroups.Any())
        {
            FilteredExerciseList = FullExerciseList;
            _isLoading = false;
            return;
        }

        FilteredExerciseList = FullExerciseList.Where(x => _selectedMuscleGroups.Contains(x.MuscleGroup)).ToList();

        _isLoading = false;
    }

    private async Task DeleteExerciseAsync(ExerciseDto exercise)
    {
        try
        {
            await RoutineService.DeleteExerciseAsync(exercise.Id);
        }
        catch
        {
            Snackbar.Add("Failed to delete the Exercise", Severity.Error);
        }

        FullExerciseList = await RoutineService.GetAllExercisesAsync();
        FilterExercises();
    }

    private async Task EditExerciseAsync(ExerciseDto exercise)
    {
        var dialogParameters = new DialogParameters<UpdateExerciseDialog>
        {
                { x => x.UpdateExercise, exercise }
        };

        var dialogOptions = new DialogOptions
        {
            FullWidth = false
        };

        var updateDialog = await DialogService.ShowAsync<UpdateExerciseDialog>("Update this Exercise!", dialogParameters, dialogOptions);
        var result = await updateDialog.Result;
        if (!result.Canceled)
        {
            bool success = await updateDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                updateDialog.Close();
                FullExerciseList = await RoutineService.GetAllExercisesAsync();
                FilterExercises();
            }
            else
            {
                Snackbar.Add("Failed to update the Exercise", Severity.Error);
            }
        }
    }
}

@page "/measurements"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Measurements
@using FitTrack.Extensions
@using FitTrack.Services.Measurements
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IMeasurementService MeasurementService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<PageTitle>Measurements</PageTitle>

@if (!MeasurementsList.Any())
{
    <MudPaper Elevation="2" Class="pa-3">
        <MudText Typo="Typo.h2" Color="Color.Primary">No Measurements are available.</MudText>
        <MudText Typo="Typo.h6">Click the button below to add your first metric to track!</MudText>
    </MudPaper>
}
else
{
    <PageHeaderTitle title="Metrics" />

    <MudGrid Spacing="6">
        @foreach (var measurement in MeasurementsList)
        {
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2">
                    <MudStack Spacing="2" Justify="Justify.Center" AlignItems="AlignItems.Center">
                        <MudStack row Justify="Justify.Center">
                            <MudText Typo="Typo.h4" Color="Color.Primary">@measurement.Name</MudText>
                            <MudIconButton Edge="Edge.End" Color="Color.Error" Size=Size.Small Icon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveMeasurementTypeAsync(measurement)" />
                        </MudStack>
                        <MudPaper Elevation="3" Width="95%">
                            <MudChart Class="pa-6"
                                      Style="margin:auto"
                                      Width="100%"
                                      ChartType="ChartType.Line"
                                      ChartSeries="@measurement.Series"
                                      XAxisLabels="@measurement.Dates"
                                      AxisChartOptions="_axisChartOptions" />
                        </MudPaper>

                        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudButton Class="mb-6" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="() => AddNewMeasurementAsync(measurement.Name)">Add Measurement</MudButton>
                            <MudButton Class="mb-6" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ViewList" OnClick="() => NavigateToHistory(measurement.MeasurementId)">View History</MudButton>
                        </MudStack>
                    </MudStack>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

<MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="AddMeasurementAsync" Style="position:fixed; bottom:25px; right:25px;" />

@code {
    private List<MeasurementChartDto> MeasurementsList { get; set; } = [];
    private ApplicationUser? CurrentUser { get; set; } = null!;
    private AxisChartOptions _axisChartOptions = new();
    private ChartOptions _chartOptions = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            _chartOptions.ShowLabels = true;
            _chartOptions.ShowLegend = true;
            _axisChartOptions.MatchBoundsToSize = true;
            MeasurementsList = await MeasurementService.GetMeasurementChartDataAsync(CurrentUser);
        }
    }

    private async Task AddMeasurementAsync()
    {
        var parameters = new DialogParameters<AddMeasurementDialog>
        {
            { x => x.ApplicationUser, CurrentUser }
        };

        var dialogOptions = new DialogOptions
        {
            FullWidth = false
        };

        var addMeasurementDialog = await DialogService.ShowAsync<AddMeasurementDialog>("Add a measurement!", parameters, dialogOptions);
        var result = await addMeasurementDialog.Result;
        if (!result.Canceled)
        {
            bool success = await addMeasurementDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                addMeasurementDialog.Close();
                MeasurementsList = await MeasurementService.GetMeasurementChartDataAsync(CurrentUser);
            }
            else
            {
                Snackbar.Add("Failed to Save the new measurement", Severity.Error);
            }
        }
    }

    private async Task AddNewMeasurementAsync(string measurementName)
    {
        var parameters = new DialogParameters<AddNewMeasurementDialog>
        {
            { x => x.User, CurrentUser },
            { x => x.MeasurementName, measurementName }
        };

        var dialogOptions = new DialogOptions
        {
            FullWidth = false
        };

        var addMeasurementDialog = await DialogService.ShowAsync<AddNewMeasurementDialog>($"Add an new {measurementName} measurement", parameters, dialogOptions);
        var result = await addMeasurementDialog.Result;
        if (!result.Canceled)
        {
            bool success = await addMeasurementDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                addMeasurementDialog.Close();
                MeasurementsList = await MeasurementService.GetMeasurementChartDataAsync(CurrentUser);
            }
            else
            {
                Snackbar.Add("Failed to Save the new measurement", Severity.Error);
            }
        }
    }

    private async Task RemoveMeasurementTypeAsync(MeasurementChartDto measurement)
    {
        if (await DialogService.ConfirmDelete())
        {
            await MeasurementService.RemoveMeasurementTypeAsync(measurement.MeasurementId);
            MeasurementsList = await MeasurementService.GetMeasurementChartDataAsync(CurrentUser);
        }
    }

    private void NavigateToHistory(int id)
    {
        NavManager.NavigateTo(@$"/measurements/history/{id}");
    }
}

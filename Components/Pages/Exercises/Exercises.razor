@page "/exercises"
@using FitTrack.Data
@using FitTrack.Data.DTOs.Exercises
@using FitTrack.Data.DTOs.Workouts
@using FitTrack.Extensions
@using FitTrack.Services.Routines
@inject IRoutineService RoutineService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageHeaderTitle title="Exercises" ActionMenu="_headerMenu" />


@if (!FullExerciseList.Any())
{
    <MudPaper Elevation="2" Class="pa-3">
        <MudText Typo="Typo.h2" Color="Color.Primary">No exercises are available.</MudText>
        <MudText Typo="Typo.h6">Click the button below to add your first Exercise!</MudText>
    </MudPaper>
}
else
{
    <AuthorizeView>
        <Authorized>
            <MudMenu @ref="_headerMenu" PositionAtCursor>
                <ChildContent>
                    <MudMenuItem Icon="@Icons.Material.Outlined.Add" OnClick="CreateExerciseAsync">Add an Exercise</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Outlined.FileUpload" Href="exercises/import">Import from File</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </Authorized>
    </AuthorizeView>

    @if (_isGrid)
    {
        <MudStack Spacing="6">
            <MudToolBar Gutters Class="mt-12">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" Variant="Variant.Filled"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" TextChanged="Search" />
                    <MudChipSet T="MuscleGroup"
                                @bind-SelectedValues="_selectedMuscleGroups"
                                SelectionMode="SelectionMode.MultiSelection">
                        @foreach (var group in Enum.GetValues(typeof(MuscleGroup)).Cast<MuscleGroup>())
                        {
                            <MudChip T="MuscleGroup" Variant="Variant.Text" Color="Color.Primary" Value="@group" OnClick="FilterExercises" />
                        }
                    </MudChipSet>
                </MudStack>
            </MudToolBar>
            <MudGrid T="ExerciseDto" Items="ExerciseList" Spacing="2" Justify="Justify.FlexStart" Class="mt-6">
                @foreach (var exercise in FilteredExerciseList)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3" xl="2" Style="display:flex">
                        <ExerciseGridItem Exercise="exercise" OnEdit="OnEditHandler" OnRemove="OnRemoveHandler" OnAdd="OnAddHandler" />
                    </MudItem>
                }
            </MudGrid>
        </MudStack>
    }
    else
    {
        <MudStack Spacing="6">
            <MudToolBar Gutters Class="mt-12">
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" Variant="Variant.Filled"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" TextChanged="Search" />
                    <MudChipSet T="MuscleGroup"
                                @bind-SelectedValues="_selectedMuscleGroups"
                                SelectionMode="SelectionMode.MultiSelection">
                        @foreach (var group in Enum.GetValues(typeof(MuscleGroup)).Cast<MuscleGroup>())
                        {
                            <MudChip T="MuscleGroup" Variant="Variant.Text" Color="Color.Primary" Value="@group" OnClick="FilterExercises" />
                        }
                    </MudChipSet>
                </MudStack>
            </MudToolBar>
            <MudTable T="ExerciseDto" Items="@FilteredExerciseList" Hover Striped>
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Muscle Group</MudTh>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <ExerciseTableRowItem Exercise="@context" OnEdit="OnEditHandler" OnRemove="OnRemoveHandler" OnAdd="OnAddHandler" />
                </RowTemplate>
            </MudTable>
        </MudStack>
    }
}

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="mb-4 mt-4" />
}

<MudStack Row Spacing="6" Style="position:fixed; bottom:25px; right:25px;">
    <MudScrollToTop>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.KeyboardArrowUp" />
    </MudScrollToTop>
</MudStack>

@code {
    private string _searchString = "";
    private List<ExerciseDto> FullExerciseList { get; set; } = [];
    private List<ExerciseDto> FilteredExerciseList { get; set; } = [];
    private bool _isLoading = false;
    private bool _isGrid = true;
    private MudMenu? _headerMenu = null;

    private IReadOnlyCollection<MuscleGroup> _selectedMuscleGroups = [];

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        FullExerciseList = await RoutineService.GetAllExercisesAsync();
        FilterExercises();
    }

    private void ClearFilters()
    {
        _selectedMuscleGroups = [];
        FilterExercises();
        _isLoading = false;
    }

    private async Task CreateExerciseAsync()
    {
        var dialogOptions = new DialogOptions
        {
            FullWidth = false
        };

        var createDialog = await DialogService.ShowAsync<CreateExerciseDialog>("Create an Exercise!", dialogOptions);
        var result = await createDialog.Result;
        if (!result.Canceled)
        {
            bool success = await createDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                createDialog.Close();
                FullExerciseList = await RoutineService.GetAllExercisesAsync();
                FilterExercises();
            }
            else
            {
                Snackbar.Add("Failed to save the Exercise", Severity.Error);
            }
        }
    }

    private void FilterExercises()
    {
        if (!_selectedMuscleGroups.Any())
        {
            FilteredExerciseList = FullExerciseList;
            _isLoading = false;
            return;
        }

        FilteredExerciseList = FullExerciseList.Where(x => _selectedMuscleGroups.Contains(x.MuscleGroup)).ToList();

        _isLoading = false;
    }

    private async Task OnEditHandler(ExerciseDto exercise)
    {
        var dialogParameters = new DialogParameters<UpdateExerciseDialog>
        {
                { x => x.UpdateExercise, exercise }
        };

        var dialogOptions = new DialogOptions
        {
            FullWidth = false
        };

        var updateDialog = await DialogService.ShowAsync<UpdateExerciseDialog>("Update this Exercise!", dialogParameters, dialogOptions);
        var result = await updateDialog.Result;
        if (!result.Canceled)
        {
            bool success = await updateDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                updateDialog.Close();
                FullExerciseList = await RoutineService.GetAllExercisesAsync();
                FilterExercises();
            }
            else
            {
                Snackbar.Add("Failed to update the Exercise", Severity.Error);
            }
        }
    }

    private async Task OnRemoveHandler(int exerciseId)
    {
        if (await DialogService.ConfirmDelete())
        {
            try
            {
                await RoutineService.DeleteExerciseAsync(exerciseId);
            }
            catch
            {
                Snackbar.Add("Failed to delete the Exercise", Severity.Error);
            }

            FullExerciseList = await RoutineService.GetAllExercisesAsync();
            FilterExercises();
        }
    }

    private async Task OnAddHandler(ExerciseDto exercise)
    {
        var dialogParameters = new DialogParameters<AddToWorkoutDialog>
        {
                { x => x._selectedExercise, exercise }
        };

        var addToWorkoutDialog = await DialogService.ShowAsync<AddToWorkoutDialog>("Add this Exercise to a Workout!", dialogParameters);
        var result = await addToWorkoutDialog.Result;
        if (!result.Canceled)
        {
            bool success = await addToWorkoutDialog.GetReturnValueAsync<bool>();
            if (success)
            {
                Snackbar.Add("The exercise were added to the given workout.", Severity.Success);
                addToWorkoutDialog.Close();
            }
            else
            {
                Snackbar.Add("Failed to Add the Exercise to a workout.", Severity.Error);
            }
        }
    }

    private void Search()
    {
        if (string.IsNullOrEmpty(_searchString))
        {
            FilteredExerciseList = FullExerciseList;
            return;
        }

        FilteredExerciseList = FullExerciseList.Where(x => x.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase) || x.MuscleGroup.ToString().Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }
}

@page "/exercises/import"
@using CsvHelper
@using System.Globalization
@using FitTrack.Data
@using FitTrack.Data.DTOs.Exercises
@using FitTrack.Services.Routines
@inject IRoutineService RoutineService
@inject ISnackbar Snackbar

<PageTitle>Exercise Import</PageTitle>

<PageHeaderTitle Title="Exercise File Import" ShowBackButton />

<MudFileUpload T="IBrowserFile" Accept=".csv" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   Class="mb-3">
            Upload Files
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudAlert Severity="Severity.Normal" ContentAlignment="HorizontalAlignment.Start">
    The import file must match formatting or it will fail.
    Muscle Groups in the file also must match what is available in the app.

    <br />
    <MudText Typo="Typo.h6">Required Format</MudText>
    <MudText Typo="Typo.body2" GutterBottom>
        Format: CSV
        <br />
        Headers: Name, MuscleGroup, Description, ImagePath
        <MudAlert Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Start">
            File columns must follow this order.
            The ImagePath column should have relative paths which will be saved to the database.
            <br />
            The folder path is as follows:
            <br />
            <code>/Exercises/{Exercise Name}/{Exercise Image}</code>
            <br />
            Example: <code>/Exercises/Air_Bike/0.jpg</code>
        </MudAlert>
        File Size Limit: 5 MB
        <br />
        Uploaded files will show below.
    </MudText>
        <MudText Typo="Typo.body1">
            The current import does not check for duplicate exercise. This means you must be careful uploading multiple files as duplicates may be saved.
</MudText>
</MudAlert>


@if (_files.Any())
{
    <MudText Typo="Typo.h5" Class="mt-6" GutterBottom>Uploaded Files</MudText>

    <MudTable Items="_files">
        <HeaderContent>
            <MudTh>File Name</MudTh>
            <MudTh>File Size</MudTh>
            <MudTh>Content Type</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Size bytes</MudTd>
            <MudTd>@context.ContentType</MudTd>
        </RowTemplate>
    </MudTable>
}

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    IList<IBrowserFile> _files = new List<IBrowserFile>();

    bool _isLoading = false;

    private async Task UploadFiles(IBrowserFile file)
    {
        _files.Add(file);

        _isLoading = true;
        try
        {
            await ImportExercises(file);
            Snackbar.Add("The import was successful!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ImportExercises(IBrowserFile file)
    {
        List<ExerciseCsvRecord> records = [];
        List<ExerciseDto> exercises = [];
        using (var stream = file.OpenReadStream(5242880))
        {
            using (var reader = new StreamReader(stream))
            {
                using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                {
                    while (await csv.ReadAsync())
                    {
                        csv.ReadHeader();
                        var record = new ExerciseDto
                        {
                            Name = csv.GetField(0),
                            MuscleGroup = Enum.TryParse<MuscleGroup>(csv.GetField(1), true, out MuscleGroup muscleGroup) ? muscleGroup : MuscleGroup.General,
                            Description = csv.GetField(2),
                            ImagePaths = csv.GetField(3).Split(',', StringSplitOptions.RemoveEmptyEntries).Select(x => Path.Combine("/Exercises/", x)).ToList()
                        };

                        exercises.Add(record);
                    }
                }
                // await foreach (var item in csv.GetRecordsAsync<ExerciseCsvRecord>())
                // {
                //     records.Add(item);
                // }
            }
        }
        // foreach (var record in records)
        // {
        //     exercises.Add(new ExerciseDto
        //     {
        //         Name = record.Name,
        //         Description = record.Description,
        //         MuscleGroup = record.MuscleGroup,
        //         ImagePaths = []
        //     });
        // }

        //await RoutineService.CreateExerciseAsync(exercises);
        Snackbar.Add("The import was successful!", Severity.Success);
    }
}


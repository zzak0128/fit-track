@using FitTrack;
@using FitTrack.Data.DTOs.Exercises
@inject IDialogService _dialogService

<MudPaper Elevation="1" Class="pa-3" MinHeight="300px" Width="300px">
    <MudStack AlignItems="AlignItems.Center" Style="width:100%">
        <MudPaper Elevation="2" Outlined Width="100%">
            <MudText Align="Align.Center" Typo="Typo.subtitle1" Inline="false">@Exercise.Name</MudText>
        </MudPaper>
        <MudImage ObjectFit="ObjectFit.Cover" Elevation="2" Style="width:95%;height:240px" Src="@Exercise.ImagePaths.FirstOrDefault()" FallbackSrc="no-image-icon.png"></MudImage>
        <MudStack AlignItems="AlignItems.Center" Row Style="width:100%">
            <MudChip T="string" Color="Color.Secondary" Variant="Variant.Filled">@Exercise.MuscleGroup</MudChip>
            <MudSpacer />
            <AuthorizeView>
                <Authorized>
                    <MudButton StartIcon="@Icons.Material.Rounded.Add" Color="Color.Primary" OnClick="OnAddAsync">Add</MudButton>
                </Authorized>
            </AuthorizeView>
            <MudMenu>
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Rounded.MoreHoriz" />
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Icon="@Icons.Material.Filled.Details" IconColor="Color.Primary" OnClick="OpenDialogAsync">Details</MudMenuItem>
                    <AuthorizeView>
                        <Authorized>
                            <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="OnEditAsync">Edit</MudMenuItem>
                            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="OnRemoveAsync">Delete</MudMenuItem>
                        </Authorized>
                        <NotAuthorized>
                            <MudMenuItem Label="Sign in to manage" Href="Account/Login" />
                        </NotAuthorized>
                    </AuthorizeView>
                </ChildContent>
            </MudMenu>
        </MudStack>
    </MudStack>
</MudPaper>

@code {
    [Parameter]
    public required ExerciseDto Exercise { get; set; }
    [Parameter]
    public EventCallback<ExerciseDto> OnEdit { get; set; }
    [Parameter]
    public EventCallback<int> OnRemove { get; set; }
    [Parameter]
    public EventCallback<ExerciseDto> OnAdd { get; set; }

    private Task OpenDialogAsync()
    {
        var dialogParameters = new DialogParameters<ExerciseDetailDialog>
        {
            {x => x.Exercise, Exercise}
        };

        return _dialogService.ShowAsync<ExerciseDetailDialog>(Exercise.Name, dialogParameters);
    }

    private async Task OnEditAsync()
    {
        await OnEdit.InvokeAsync(Exercise);
    }

    private async Task OnRemoveAsync()
    {
        await OnRemove.InvokeAsync(Exercise.Id);
    }

    private async Task OnAddAsync()
    {
        await OnAdd.InvokeAsync(Exercise);
    }


}

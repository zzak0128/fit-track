@page "/routines/detail/{RoutineId:int}"
@using FitTrack.Components.Pages.Workouts
@using FitTrack.Data
@using FitTrack.Data.DTOs.ExerciseSets
@using FitTrack.Data.DTOs.Exercises
@using FitTrack.Data.DTOs.Routines
@using FitTrack.Services.Routines
@using FitTrack.Data.DTOs.Workouts
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IRoutineService RoutineService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
<PageHeaderTitle Title="Routine Overview" ShowBackButton />

<MudStack row Justify="Justify.SpaceBetween">
    <MudText Class="mb-3" Typo="Typo.h3">@DetailRoutine?.Routine.Name</MudText>
    <MudIconButton Size="Size.Large" Color="Color.Primary" Icon="@Icons.Material.Rounded.AddCircle" OnClick="CreateWorkoutAsync" />
</MudStack>

@if (DetailRoutine is null || !DetailRoutine.Workouts.Any())
{
    <MudPaper Elevation="2" Class="pa-3">
        <MudText Typo="Typo.h2" Color="Color.Primary">This routine has no workouts setup.</MudText>
        <MudText Typo="Typo.h6">Click the add button to add your first Workout!</MudText>
    </MudPaper>
}
else
{
    <MudTabs @ref="mudTabs" Elevation="1" Outlined ApplyEffectsToContainer Ripple PanelClass="pa-6">
        @foreach (var workout in DetailRoutine.Workouts)
        {
            <MudTabPanel Text="@workout.Name" OnClick="() => GetTabList(workout.Id)">
                <MudStack Row AlignItems="AlignItems.Center" Class="mb-2">
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => AddToSelectedExerciseList(workout.Id)">Add Set</MudButton>
                    <MudAutocomplete @bind-Value="SelectedExercise"
                                     SearchFunc="Search"
                                     Variant="Variant.Outlined"
                                     Label="Add an Exercise"
                                     Dense
                                     Placeholder="Search"
                                     Clearable
                                     ToStringFunc="(e) => e?.Name">
                        <ItemTemplate>
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudText>@context?.Name</MudText>
                                <MudChip T="MuscleGroup" Color="Color.Secondary" Variant="Variant.Filled">@context?.MuscleGroup</MudChip>
                            </MudStack>
                        </ItemTemplate>
                    </MudAutocomplete>
                    <MudMenu>
                        <ActivatorContent>
                            <MudButton StartIcon="@Icons.Material.Filled.MoreHoriz">More</MudButton>
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem IconColor="Color.Default" Icon="@Icons.Material.Filled.Edit" Label="Rename" OnClick="() => RenameWorkoutAsync(workout)"/>
                            <MudMenuItem IconColor="Color.Error" Icon="@Icons.Material.Filled.Remove" Label="Remove" OnClick="() => RemoveWorkoutAsync(workout)" />
                        </ChildContent>
                    </MudMenu>
                </MudStack>
                <MudDataGrid T="DetailExerciseSetDto"
                             Items="CurrentSets"
                             ReadOnly="false"
                             EditMode="DataGridEditMode.Cell"
                             StartedEditingItem="@StartedEditingItem"
                             CanceledEditingItem="@CanceledEditingItem"
                             CommittedItemChanges="@CommittedItemChanges"
                             EditTrigger="DataGridEditTrigger.OnRowClick">
                    <Columns>
                        <HierarchyColumn T="DetailExerciseSetDto" />
                        <PropertyColumn Property="x => x.Sequence" />
                        <PropertyColumn Property="x => x.Exercise.Name" Title="Exercise" Editable="false" />
                        <PropertyColumn Title="Weight" Property="x => x.Weight" />
                        <PropertyColumn Title="Reps" Property="x => x.Repetitions" />
                        <PropertyColumn Title="# of Sets" Property="x => x.SetCount" />
                    </Columns>
                    <ChildRowContent>
                        <MudStack>
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudStack Row AlignItems="AlignItems.Center">
                                    <MudText Typo="Typo.h6">@context.Item.Exercise.Name</MudText>
                                    <MudChip T="MuscleGroup" Color="Color.Secondary" Variant="Variant.Filled">@context.Item.Exercise.MuscleGroup</MudChip>
                                </MudStack>
                                <MudButton Variant="Variant.Text" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveExerciseSetAsync(context.Item)">Remove</MudButton>
                            </MudStack>
                            <MudText>@context.Item.Exercise.Description</MudText>
                        </MudStack>
                    </ChildRowContent>
                </MudDataGrid>
            </MudTabPanel>
        }
    </MudTabs>
}

@code {
    [Parameter]
    public int RoutineId { get; set; }

    private MudTabs mudTabs;
    private bool _shouldLoadLastTab = false;

    private MudMenu mudMenu;

    private ExerciseDto? SelectedExercise;
    private List<ExerciseDto> ExerciseList { get; set; } = [];
    private List<DetailExerciseSetDto> ExerciseSets { get; set; } = [];

    private DetailExerciseSetDto ExerciseSetBackup = new();

    private DetailRoutineDto DetailRoutine;
    private ApplicationUser CurrentUser;
    private List<DetailExerciseSetDto> CurrentSets = [];

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        CurrentUser = await UserManager.GetUserAsync(authState.User);

        if (CurrentUser is not null)
        {
            DetailRoutine = await RoutineService.GetDetailRoutineByIdAsync(RoutineId, CurrentUser);
            ExerciseList = await RoutineService.GetAllExercisesAsync();
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && _shouldLoadLastTab)
        {
            mudTabs.ActivatePanel(mudTabs.Panels.Last());
            _shouldLoadLastTab = false;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task RefreshDetailRoutineAsync(int workoutId)
    {
        DetailRoutine = await RoutineService.GetDetailRoutineByIdAsync(RoutineId, CurrentUser);
        GetTabList(workoutId);
    }

    private void GetTabList(int workoutId)
    {
        CurrentSets = DetailRoutine.ExerciseSets
            .Where(es => es.WorkoutId == workoutId)
            .OrderBy(x => x.Sequence)
            .ToList();
    }

    private async Task CreateWorkoutAsync()
    {
        var createDialog = await DialogService.ShowAsync<AddWorkoutDialog>("Create a Workout!");

        var result = await createDialog.Result;
        if (!result.Canceled)
        {
            string newWorkoutName = await createDialog.GetReturnValueAsync<string>();
            if (!string.IsNullOrEmpty(newWorkoutName))
            {
                createDialog.Close();
                var workout = (new BaseWorkoutDto
                {
                    Name = newWorkoutName
                });

                await RoutineService.AddWorkoutToRoutineAsync(DetailRoutine.Routine.Id, workout);
                await RefreshDetailRoutineAsync(workout.Id);

                _shouldLoadLastTab = true;
            }
            else
            {
                Snackbar.Add("Failed to Save the new Workout", Severity.Error);
            }
        }
    }

    private async Task RenameWorkoutAsync(BaseWorkoutDto workout)
    {
        var dialogParams = new DialogParameters<WorkoutRenameDialog>
        {
            {x => x.updateWorkout, workout}
        };

        var renameDialog = await DialogService.ShowAsync<WorkoutRenameDialog>("Rename a Workout!", dialogParams);

        var result = await renameDialog.Result;
        if (!result.Canceled)
        {
            string newWorkoutName = await renameDialog.GetReturnValueAsync<string>();
            if (!string.IsNullOrEmpty(newWorkoutName))
            {
                renameDialog.Close();
                var renameWorkout = (new RenameWorkoutDto
                {
                    WorkoutId = workout.Id,
                    NewName = newWorkoutName
                });

                await RoutineService.RenameWorkoutAsync(renameWorkout);

                var toRename = DetailRoutine.Workouts.Find(x => x.Id == workout.Id);
                toRename.Name = newWorkoutName;
            }
            else
            {
                Snackbar.Add("Failed to Save the new Workout", Severity.Error);
            }
        }
    }

    private async Task<IEnumerable<ExerciseDto>> Search(string value, CancellationToken token)
    {
        ExerciseList = await RoutineService.GetAllExercisesAsync();

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return ExerciseList;
        }

        return ExerciseList.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.MuscleGroup.ToString().Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task AddToSelectedExerciseList(int workoutId)
    {
        if (SelectedExercise is null)
        {
            return;
        }

        await RoutineService.AddExerciseSetToWorkoutAsync(new CreateExerciseSetDto
        {
            WorkoutId = workoutId,
            Exercise = SelectedExercise
        });

        SelectedExercise = null;
        await RefreshDetailRoutineAsync(workoutId);
    }

    private async Task RemoveExerciseSetAsync(DetailExerciseSetDto exercise)
    {
        await RoutineService.RemoveExerciseSetAsync(new RemoveExerciseSetDto
        {
            WorkoutId = exercise.WorkoutId,
            ExerciseSetId = exercise.Id
        });

        await RefreshDetailRoutineAsync(exercise.WorkoutId);
    }

    private async Task RemoveWorkoutAsync(BaseWorkoutDto workout)
    {
        await RoutineService.RemoveWorkoutAsync(workout.Id);

        await RefreshDetailRoutineAsync(workout.Id);
    }

    // Data Grid Events
    private void StartedEditingItem(DetailExerciseSetDto item)
    {
        ExerciseSetBackup.Id = item.Id;
        ExerciseSetBackup.Exercise = item.Exercise;
        ExerciseSetBackup.Weight = item.Weight;
        ExerciseSetBackup.Repetitions = item.Repetitions;
        ExerciseSetBackup.SetCount = item.SetCount;
    }

    private void CanceledEditingItem(DetailExerciseSetDto item)
    {
        item.Id = ExerciseSetBackup.Id;
        item.Exercise = ExerciseSetBackup.Exercise;
        item.Weight = ExerciseSetBackup.Weight;
        item.Repetitions = ExerciseSetBackup.Repetitions;
        item.SetCount = ExerciseSetBackup.SetCount;
    }

    private async Task CommittedItemChanges(DetailExerciseSetDto item)
    {
        var exerciseToUpdate = ExerciseSets.Find(x => x.Id == item.Id);
        exerciseToUpdate = item;

        UpdateExerciseSetDto updateExerciseSet = new()
        {
            Id = item.Id,
            Weight = item.Weight,
            Repetitions = item.Repetitions,
            SetCount = item.SetCount,
            Sequence = item.Sequence,
        };

        await RoutineService.UpdateExerciseSetAsync(updateExerciseSet);
        await RefreshDetailRoutineAsync(item.WorkoutId);
    }
}
